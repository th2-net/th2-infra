name: e2e test Kubernetes 1.20

on:
  pull_request:
    paths:
      - "ci/**"
      - "example-values/**"
      - "chart/**"
      - "box-chart/**"
      - ".github/workflows/e2e-test.yml"
  workflow_dispatch:
    inputs:
      infraNamespace:
        description: "Infra namespace"
        default: "service"
        type: string
      schemaNamespace:
        description: "Schema namespace"
        default: "th2-schema"
        type: string

env:
  INFRA_NAMESPACE: "${{ github.event.inputs.infraNamespace || 'service' }}"
  MONITORING_NAMESPACE: monitoring
  SCHEMA_NAMESPACE: "${{ github.event.inputs.schemaNamespace || 'th2-schema' }}"
  REPOSITORY_URL: "${{ github.event.pull_request.base.repo.clone_url }}"
  REPOSITORY_REF_NAME: "${{ github.event.pull_request.head.ref }}"
  LOKI_USERNAME: "${{ secrets.LOKI_USERNAME }}"
  LOKI_PASSWORD: "${{ secrets.LOKI_PASSWORD }}"
  pull_request: "${{ github.event.pull_request.number }}"
  commit_hash: "${{ github.event.pull_request.head.sha }}"

jobs:
  deploy-and-test:
    if: |
      !contains(github.event.pull_request.labels, 'automated')
    runs-on: ubuntu-latest
    steps:
      - name: Go cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - uses: actions/checkout@v2

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.2.0
        with:
          config: ./ci/kind-cluster.yaml
          version: v0.11.0
          node_image: kindest/node:v1.20.7@sha256:e645428988191fc824529fd0bb5c94244c12401cf5f5ea3bd875eb0a787f0fe9

      - name: Init test schema
        run: |
          mkdir ./e2e-test-schema.git/
          git config --global user.email "ci@actions"
          git config --global user.name "CI"
          git --git-dir=./e2e-test-schema.git/ --bare init
          git --git-dir=./e2e-test-schema.git/ --work-tree=./ci/e2e-test-schema/ add .
          git --git-dir=./e2e-test-schema.git/ --work-tree=./ci/e2e-test-schema/ commit -m "Init repo"
          git --git-dir=./e2e-test-schema.git/ --work-tree=./ci/e2e-test-schema/ branch schema
          docker exec chart-testing-control-plane mkdir -p /opt/git/
          docker cp ./e2e-test-schema.git/ chart-testing-control-plane:/opt/git/

      - name: Install python and ansible dependencies
        run: |
          ansible-galaxy collection install community.crypto:==1.3.0 community.kubernetes:==1.1.1
          pip install kubernetes==12.0.0

      - name: Run th2-infra deployment via Ansible
        run: |
          ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook ./ci/e2e-via-ssh-deployment-playbook.yaml -e 'ansible_python_interpreter=/usr/bin/python3'
          kubectl -n $INFRA_NAMESPACE patch deployments.apps infra-mgr -p '{"spec":{"template":{"spec":{"initContainers":[{"name":"init-myservice","image":"busybox:1.30.1","command":["sh","-c","until nc -vz infra-git 22; do echo \"Waiting for infra-git service\"; sleep 2; done;"]}]}}}}'
          kubectl -n $INFRA_NAMESPACE patch deployments.apps infra-operator -p '{"spec":{"template":{"spec":{"initContainers":[{"name":"init-myservice","image":"busybox:1.30.1","command":["sh","-c","until nc -vz rabbitmq 5672; do echo \"Waiting for rabbitmq service\"; sleep 2; done;"]}]}}}}'
          kubectl get pods --all-namespaces

      - name: Testing
        run: |
          cd ./ci
          go test -failfast th2_infra_test.go

      - name: Getting logs
        if: always()
        run: |
          echo -e "\n\033[0;31m[Pods]\033[0m" && kubectl get pods -o wide --all-namespaces || true
          echo -e "\n\033[0;31m[Services]\033[0m" && kubectl get svc --all-namespaces || true
          echo -e "\n\033[0;31m[Ingresses]\033[0m" && kubectl describe ingress --all-namespaces || true
          echo -e "\n\033[0;31m[HelmReleases]\033[0m" && kubectl get hr --all-namespaces || true
          echo -e "\n\033[0;31m[Nodes]\033[0m" && kubectl describe nodes || true
          echo -e "\n\033[0;31m[Configmaps]\033[0m" && kubectl get configmaps --all-namespaces || true
          echo -e "\n\033[0;31m[Secrets]\033[0m" && kubectl get secrets --all-namespaces || true
          echo -e "\n\033[0;31m[Events]\033[0m" && kubectl get events --all-namespaces --sort-by='.metadata.creationTimestamp' || true
          echo -e "\n\033[0;31m[PV]\033[0m" && kubectl get pv || true

          for D in $(kubectl -n $INFRA_NAMESPACE get deployments --no-headers -o custom-columns=":metadata.name")
          do
            kubectl -n $INFRA_NAMESPACE logs deployment/$D --all-containers --timestamps > $D.log || true
          done
          kubectl -n $INFRA_NAMESPACE logs rabbitmq-0 > rabbitmq.log || true
          kubectl -n $INFRA_NAMESPACE logs cassandra-0 > cassandra.log || true
          kubectl -n $INFRA_NAMESPACE exec cassandra-0 -- cat /opt/bitnami/cassandra/logs/cassandra.log > cassandra-container.log || true
          kubectl -n $INFRA_NAMESPACE logs daemonsets/grafana-agent-logs --all-containers --timestamps > grafana-agent-logs.log || true
          
          for D in $(kubectl -n $SCHEMA_NAMESPACE get deployments --no-headers -o custom-columns=":metadata.name")
          do
            kubectl -n $SCHEMA_NAMESPACE logs deployment/$D --timestamps > $D.log || true
          done

          echo -e "Grafana link: https://th2.grafana.net/explore?orgId=1&left=%7B%22datasource%22:%22grafanacloud-th2-logs%22,%22queries%22:%5B%7B%22refId%22:%22A%22,%22expr%22:%22%7Brun%3D%5C%22"$pull_request":"$commit_hash"%5C%22%7D%22%7D%5D,%22range%22:%7B%22from%22:%22now-30d%22,%22to%22:%22now%22%7D%7D" >> $GITHUB_STEP_SUMMARY || true

      - name: Uploading logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: infra-logs
          path: "*.log"
