---
# Default values for th2-core.

# Image repositories and credentials to create pull secrets
productRegistry:
  secret: th2-core
  name: product-registry-example-name
  username:
  password:

ingress:
  host: localhost

#Deprecated setting.It will be removed next release. Now host is taken from k8Url in infra-operator settings
#externalRabbitMQHost:
#  host: localhost

helmoperator:
  helm:
    versions: v3
  fullnameOverride: helm-operator
  nameOverrde: helm-operator
  chartsSyncInterval: 300m
  prometheus:
    enabled: enabled
    serviceMonitor:
      create: true
      namespace: monitoring

infraEditor:
  image:
    repository: ghcr.io/th2-net/th2-infra-editor
    tag: 1.0.65

infraRepo:
  image:
    repository: ghcr.io/th2-net/infra-repo
    tag: 0.7.0

infraOperator:
  prometheusConfiguration:
    enabled: true
  image:
    repository: ghcr.io/th2-net/th2-infra-operator
    tag: 4.0.1-infra-2.0.0-1548530202
  config:
    chart:
      repository: http://infra-repo:8080 #https://th2-net.github.io
      version: 0.7.0
      name: infra-operator-tpl
    namespacePrefixes: 
    - "th2-"
    k8sUrl: "<kubernetes-external-entrypoint>"
    rabbitMQManagement:
#      host: "" -  read from rabbitmq config
#      managementPort: "15672" - read from rabbitmq config rabbitmqManagerPort
#      applicationPort: 5672 - read from rabbitmq config rabbitmqNodePort
#      vhostName: "th2" - read from rabbitmq config rabbitmqVhost
#      username: "th2" - read from rabbitmq config rabbitmqUsername
      exchangeName: "global-notification" #default value "global-notification"
      password: "${RABBITMQ_PASS}"
      persistence: true
      schemaPermissions:
        configure: ""
        read: ".*"
        write: ".*"

infraMgr:
  prometheusConfiguration:
    enabled: true
  image:
    repository: ghcr.io/th2-net/th2-infra-mgr
    tag: 1.4.3-infra-2.0.0-1521338401
  git:
    secretName: infra-mgr
    privateKeyFileSecret: infra-mgr
    secretMountPath: /home/service/keys
    repository: git@github.com:th2-net/th2-demo-configuration.git
    repositoryLocalCache: /home/service/repository
    httpAuthUsername: "" #should be stored in secret th2-git-access-schemas 
    httpAuthPassword: "" #should be stored in secret th2-git-access-schemas
  rabbitmq:
    vHostPrefix: th2-
    usernamePrefix: th2-user-
    secret: rabbitmq
    passwordLength: 24
  cassandra:
    keyspacePrefix: schema_
    secret: cassandra
  kubernetes:
    namespacePrefix: "th2-" # must be not more than 5 symbols
    ingress: ingress-rules
    configMaps:
      logging: logging-config-template
      rabbitmq: rabbit-mq-app-config
      rabbitmq-ext: rabbit-mq-external-app-config
      cassandra: cradle
      cassandra-ext: cradle-external
      prometheus: prometheus-app-config
    secrets:
    - th2-core 
    - th2-solution
    - th2-proprietary

#If there is no ability to get access for cluster to repo with schemas' namespaces configs git repo can be deployed internal in the cluster. 
#Change to "internal = true" in case you need internal git repo.
infraGit:
  internal: false
  nodePort: 32600
  image:
    repository: ghcr.io/th2-net/git-ssh
    tag: v0.1.0
  pvc:
    accessModes: ReadWriteMany
    storage: 5Gi
    storageClassName: local-storage

# If service not internal - ExternalName service will be created, credentials will be mapped to secrets / config maps
# otherwise service will be deployed as a chart dependency
rabbitmq:
  internal: true
  rabbitmqMemoryHighWatermark: 1024MB
  #it is not required if the service internal
#  host: ""
  fullnameOverride: rabbitmq
  rabbitmqVhost: th2
  rabbitmqUsername: th2
  # will be generated if empty
  rabbitmqPassword: ""
  rabbitmqErlangCookie: ""
  rabbitmqExchange: th2-exchange
  replicaCount: 1
  podAntiAffinity: hard
  persistentVolume:
    enabled: true
    storageClass: local-storage
    size: 10Gi
  livenessProbe:
    exec:
      command:
      - /bin/bash
      - -ec
      - rabbitmq-diagnostics -q check_running
    initialDelaySeconds: 120
    timeoutSeconds: 20
    periodSeconds: 30
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    exec:
      command:
      - /bin/bash
      - -ec
      - rabbitmq-diagnostics -q check_running
    initialDelaySeconds: 10
    timeoutSeconds: 20
    periodSeconds: 30
    failureThreshold: 3
    successThreshold: 1
  service:
    type: "NodePort"
    amqpNodePort: 32000
  rabbitmqPrometheusPlugin:
    enabled: true
  prometheus:
    exporter:
      enabled: false
    operator:
      enabled: true
      alerts:
        enabled: true
      serviceMonitor:
        selector:
          release: prometheus

# If service not internal - ExternalName service will be created, credentials will be mapped to secrets / config maps
# otherwise service will be deployed as a chart dependency
cassandra:
  cradle:
#    networkTopologyStrategy:
#      dc1: 1
    instanceName: th2-infra 
    timeout: 5000
    pageSize: 5000
    cradleMaxEventBatchSize: "1048576"
    cradleMaxMessageBatchSize: "1048576"
  internal: true
  #it is not required if the service internal
#  host: ""
  fullnameOverride: cassandra
  cluster:
    datacenter: dc1
  dbUser:
    user: th2
    # will be generated if empty
    password: ""
  keyspace: cradle
  persistence:
    enabled: false
    storageClass: local-storage
    size: 50Gi

kubernetes-dashboard:
  namespace: service
  image:
    repository: kubernetesui/dashboard
  protocolHttp: true
  rbac:
    create: true
    clusterRoleMetrics: true
  serviceAccount:
    create: false
    name: th2infra-kubernetes-dashboard
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/add-base-url: "true"
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      nginx.ingress.kubernetes.io/configuration-snippet: "rewrite ^(/dashboard)$ $scheme://$http_host$1/ redirect;"
    paths:
      - /dashboard/(.*)
    hosts:
      - localhost
