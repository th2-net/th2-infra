suite: test deploy and service
values:
  - ../values.yaml
templates:
  - component.yaml
chart:
  version: 1.0.0
  appVersion: 1.0.0
tests:
  - it: kind Deployment
    documentIndex: 1
    asserts:
      - isKind:
          of: Deployment
  - it: hostAliases missing
    documentIndex: 1
    asserts:
      - isNull:
          path: spec.template.spec.hostAliases
  - it: hostAliases empty
    documentIndex: 1
    set:
      component:
        extendedSettings:
          hostAliases: []
    asserts:
      - isEmpty:
          path: spec.template.spec.hostAliases
  - it: valid hostAliases
    documentIndex: 1
    set:
      component:
        extendedSettings:
          hostAliases: 
          - ip: "127.0.0.1"
            hostnames:
            - "foo.local"
    asserts:
      - isNotEmpty:
          path: spec.template.spec.hostAliases
      - isNotEmpty:
          path: spec.template.spec.hostAliases[0].hostnames
      - isNotNull:
          path: spec.template.spec.hostAliases[0].ip
      - equal:
          path: spec.template.spec.hostAliases[0].ip
          value: 127.0.0.1
      - equal:
          path: spec.template.spec.hostAliases[0].hostnames[0]
          value: "foo.local"
  - it: more than one hostAliases
    documentIndex: 1
    set:
      component:
        extendedSettings:
          hostAliases: 
          - ip: "127.0.0.1"
            hostnames:
            - "foo.local"
          - ip: "10.1.2.3"
            hostnames:
            - "foo.remote"
    asserts:
      - isNotEmpty:
          path: spec.template.spec.hostAliases
      - isNotEmpty:
          path: spec.template.spec.hostAliases[0].hostnames
      - isNotNull:
          path: spec.template.spec.hostAliases[0].ip
      - isNotEmpty:
          path: spec.template.spec.hostAliases[1].hostnames
      - isNotNull:
          path: spec.template.spec.hostAliases[1].ip
      - equal:
          path: spec.template.spec.hostAliases[1].ip
          value: 10.1.2.3
      - equal:
          path: spec.template.spec.hostAliases[1].hostnames[0]
          value: "foo.remote"
  - it: hostNetwork true
    documentIndex: 1
    set:
      component:
        extendedSettings:
          hostNetwork: true
    asserts:
      - isNotNull: 
          path: spec.template.spec.hostNetwork
      - equal:
          path: spec.template.spec.dnsPolicy
          value: "ClusterFirstWithHostNet"
      - contains:
          path: spec.template.spec.volumes[0].projected.sources
          content: 
            configMap:
              name: "rabbit-mq-app-config"
      - notContains:
          path: spec.template.spec.volumes[0].projected.sources
          content:
            configMap: 
              name: "rabbit-mq-external-app-config"
      - contains:
          path: spec.template.spec.volumes[0].projected.sources
          content:
            configMap: 
              name: "cradle"
      - notContains:
          path: spec.template.spec.volumes[0].projected.sources
          content:
            configMap: 
              name: "cradle-external"
  - it: hostNetwork false
    documentIndex: 1
    set:
      component:
        extendedSettings:
          hostNetwork: false
    asserts:
      - isNull: 
          path: spec.template.spec.hostNetwork
      - isNull:
          path: spec.template.spec.dnsPolicy
      - contains:
          path: spec.template.spec.volumes[0].projected.sources
          content: 
            configMap:
              name: "rabbit-mq-app-config"
      - notContains:
          path: spec.template.spec.volumes[0].projected.sources
          content:
            configMap: 
              name: "rabbit-mq-external-app-config"
      - contains:
          path: spec.template.spec.volumes[0].projected.sources
          content:
            configMap: 
              name: "cradle"
      - notContains:
          path: spec.template.spec.volumes[0].projected.sources
          content:
            configMap: 
              name: "cradle-external" 
  - it: nodeSelector missing
    set:
      content:
        component:
          extendedSettings:
            externalBox:
              enabled: true
    asserts:
      - isNull:
          path: spec.template.spec.nodeSelector
        documentIndex: 1
  - it: imagePullSecrets valid
    documentIndex: 1
    set:
      component:
        imagePullSecrets: 
          - 'test:secret.1'
    asserts:
      - isNotNull: 
          path: spec.template.spec.imagePullSecrets
      - notMatchRegex:
          path: spec.template.spec.imagePullSecrets[0].name
          pattern: '^.*[:,\.]'
         
