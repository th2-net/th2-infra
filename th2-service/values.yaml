---
# Default values for th2-core.

# Image repositories and credentials to create pull secrets
productRegistry:
  secret: th2-core
  name: ""
  username: ""
  password: ""

solutionRegistry:
  secret: th2-solution
  registry: ""
  username: ""
  password: ""

proprietaryRegistry:
  secret: th2-proprietary
  registry: ""
  username: ""
  password: ""

ingress:
  host: &host ""

#Deprecated setting.It will be removed next release. Now host is taken from k8Url in infra-operator settings
#externalRabbitMQHost:
#  host: localhost

helmoperator:
  internal: true
  helm:
    versions: v3
  fullnameOverride: helm-operator
  nameOverrde: helm-operator
  chartsSyncInterval: 300m
  prometheus:
    enabled: enabled
    serviceMonitor:
      create: true
      namespace: monitoring

infraEditor:
  image:
    repository: ghcr.io/th2-net/th2-infra-editor
    tag: 1.0.65

infraRepo:
  image:
    repository: ghcr.io/th2-net/infra-repo
    tag: 0.7.0

infraOperator:
  prometheusConfiguration:
    enabled: true
  image:
    repository: ghcr.io/th2-net/th2-infra-operator
    tag: 3.4.3-infra-1.7.1-1728152367
  config:
    chart:
      repository: http://infra-repo:8080 #https://th2-net.github.io
      version: 0.7.1
      name: infra-operator-tpl
    namespacePrefixes:
      - "th2-"
    k8sUrl: "<kubernetes-external-entrypoint>"
    rabbitMQManagement:
#      host: "" -  host is taken from rabbitmq config
      port: "15672"
      username: "th2"
      password: "${RABBITMQ_PASS}"
      persistence: true
      schemaPermissions:
        configure: ""
        read: ".*"
        write: ".*"
  resources:
    limits:
      cpu: 800m
      memory: 1200Mi
    requests:
      cpu: 200m
      memory: 500Mi
  jvm:
    javaToolOptions: "-XX:+ExitOnOutOfMemoryError -XX:+UseContainerSupport -XX:MaxRAMPercentage=85"

infraMgr:
  prometheusConfiguration:
    enabled: true
  image:
    repository: ghcr.io/th2-net/th2-infra-mgr
    tag: 1.5.1-infra-1.7.1-1708594635
  git:
    secretName: infra-mgr
    privateKeyFileSecret: infra-mgr
    secretMountPath: /home/service/keys
    repository: git@github.com:th2-net/th2-demo-configuration.git
    repositoryLocalCache: /home/service/repository
    httpAuthUsername: "" #should be stored in secret th2-git-access-schemas
    httpAuthPassword: "" #should be stored in secret th2-git-access-schemas
  rabbitmq:
    vHostPrefix: th2-
    usernamePrefix: th2-user-
    secret: rabbitmq
    passwordLength: 24
  cassandra:
    keyspacePrefix: schema_
    secret: cassandra
  kubernetes:
    namespacePrefix: "th2-" # must be not more than 5 symbols
    ingress: ingress-rules
    configMaps:
      logging: logging-config-template
      rabbitmq: rabbit-mq-app-config
      rabbitmq-ext: rabbit-mq-external-app-config
      cassandra: cradle
      cassandra-ext: cradle-external
      prometheus: prometheus-app-config
    #FIXME: delete git-chart-creds secrets once it will be deleted from operator resources https://github.com/th2-net/th2-infra-operator/tree/master/src/main/resources 
    secrets:
      - th2-core
      - th2-solution
      - th2-proprietary
      - git-chart-creds
  resources:
    limits:
      cpu: 500m
      memory: 2500Mi
    requests:
      cpu: 200m
      memory: 500Mi
  jvm:
    javaToolOptions: "-XX:+ExitOnOutOfMemoryError -XX:+UseContainerSupport -XX:MaxRAMPercentage=85"

#If there is no ability to get access for cluster to repo with schemas' namespaces configs git repo can be deployed internal in the cluster. 
#Change to "internal = true" in case you need internal git repo.
infraGit:
  internal: false
  nodePort: 32600
  image:
    repository: ghcr.io/th2-net/git-ssh
    tag: v0.1.0
  pvc:
    accessModes: ReadWriteMany
    storage: 5Gi
    storageClassName: local-storage
  resources:
    limits:
      cpu: 100m
      memory: 200Mi
    requests:
      cpu: 50m
      memory: 100Mi

# If service not internal - ExternalName service will be created, credentials will be mapped to secrets / config maps
# otherwise service will be deployed as a chart dependency
rabbitmq:
  internal: true
  rabbitmqMemoryHighWatermark: 1024MB
  #it is not required if the service internal
  #  host: ""
  fullnameOverride: rabbitmq
  rabbitmqVhost: th2
  rabbitmqUsername: th2
  # will be generated if empty
  rabbitmqPassword: ""
  rabbitmqErlangCookie: ""
  rabbitmqExchange: th2-exchange
  replicaCount: 1
  podAntiAffinity: hard
  persistentVolume:
    enabled: true
    storageClass: local-storage
    size: 10Gi
  livenessProbe:
    exec:
      command:
        - /bin/bash
        - -ec
        - rabbitmq-diagnostics -q check_running
    initialDelaySeconds: 120
    timeoutSeconds: 20
    periodSeconds: 30
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    exec:
      command:
        - /bin/bash
        - -ec
        - rabbitmq-diagnostics -q check_running
    initialDelaySeconds: 10
    timeoutSeconds: 20
    periodSeconds: 30
    failureThreshold: 3
    successThreshold: 1
  service:
    type: "NodePort"
    amqpNodePort: 32000
  rabbitmqPrometheusPlugin:
    enabled: true
  prometheus:
    exporter:
      enabled: false
    operator:
      enabled: true
      alerts:
        enabled: true
      serviceMonitor:
        selector:
          release: prometheus

# If service not internal - ExternalName service will be created, credentials will be mapped to secrets / config maps
# otherwise service will be deployed as a chart dependency
cassandra:
  cradle:
#    networkTopologyStrategy:
#      dc1: 1
    instanceName: th2-infra 
    timeout: 5000
    pageSize: 5000
    cradleMaxEventBatchSize: "1048576"
    cradleMaxMessageBatchSize: "1048576"
  internal: true
  #it is not required if the service internal
  #  host: ""
  fullnameOverride: cassandra
  cluster:
    datacenter: dc1
  dbUser:
    user: th2
    # will be generated if empty
    password: ""
  keyspace: cradle
  persistence:
    enabled: false
    storageClass: local-storage
    size: 50Gi

kubernetes-dashboard:
  internal: true
  namespace: service
  image:
    repository: kubernetesui/dashboard
  protocolHttp: true
  rbac:
    create: true
    clusterRoleMetrics: true
  serviceAccount:
    create: false
    name: th2infra-kubernetes-dashboard
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/rewrite-target: $1
      nginx.ingress.kubernetes.io/configuration-snippet: rewrite ^/([a-z\-0-9]*)$ $scheme://$http_host/$1/ redirect;
    paths:
      - /dashboard($|/.*)
    hosts: [*host]
